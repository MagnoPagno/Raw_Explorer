function raw_explorer

% Graphical User Interface to explore ISS Imagent raw data
%
% Usage - call raw_explorer from Matlab console
%
% Written by Matteo Caffini, PhD
% CIMeC - Universita' dgli Studi di Trento
% on June, 14th 2017 in Rovereto (TN)
%

Hmain = []; % handles to uicontrols and graphics
global tmin tmax trange ymin ymax yrange timeline sampling_frequency
global channelNames channelColors samplebaseline
global sensors nChannels
global events eventsColors eventsCodes eventsLabels
global probe atlas
global current_file

screenSize = get(0,'ScreenSize');
feature('DefaultCharacterSet', 'UTF8');

% Set main figure size
figureW = screenSize(3) * 3/4;   % Screen width in pixels
figureH = screenSize(4) * 3/4;   % Screen height in pixels
%figureRatio = figureW / figureH;

% Set UI objects size
mainAxesWidth = .65;
panelWidth = (1-mainAxesWidth) / 2;
stepW = 0.02;
stepH = 0.05;

% Set UI objects position
figurePosition = [screenSize(3)/2-figureW/2 screenSize(4)/2-figureH/2 figureW figureH];
panelL_position = [stepW stepH panelWidth-2*stepW 1-2*stepH];
panelCT_position = [panelWidth 12*stepH mainAxesWidth 7*stepH];
panelCB_position = [panelWidth stepH mainAxesWidth 11*stepH];
panelR_position = [panelWidth+mainAxesWidth+stepW stepH panelWidth-2*stepW 1-2*stepH];

% Set color theme
theme = 'dark';
switch theme
    case 'classic'
        backgroundColor = get(0,'DefaultUicontrolBackgroundcolor');
        foregroundColor = 'k';
        panelColor = [211 211 211]/255;
    case 'dark'
        backgroundColor = [68 68 68]/255;
        foregroundColor = 'w';
        panelColor = [92 92 92]/255;
end

% Set font
if ismac
    defaultFontName = 'Lucida Grande';
    if sum(strcmp(listfonts,defaultFontName)) < 1
        defaultFontName = 'Helvetica';
    end
elseif ispc
    defaultFontName = 'Lucida Sans Unicode';
    if sum(strcmp(listfonts,defaultFontName)) < 1
        defaultFontName = 'Helvetica';
    end
else
    defaultFontName = 'Helvetica';
end

% UI objects
Hmain.mainFigure = figure('Position', figurePosition, ...
    'Visible', 'on', ...
    'Resize', 'on',...
    'Name', 'Raw Explorer', ...
    'Numbertitle', 'off', ...
    'Tag', 'sensors_viewer', ...
    'Color', backgroundColor, ...
    'Toolbar', 'none', ...
    'Menubar', 'none', ...
    'DoubleBuffer', 'on', ...
    'DockControls', 'off', ...
    'Renderer', 'OpenGL');

Hmain.menuFile = uimenu('Parent', Hmain.mainFigure, 'Label', 'File');
Hmain.menuFile_loadData = uimenu('Parent', Hmain.menuFile, ...
    'Label', 'Load Data...', ...
    'Callback', @load_data);
Hmain.menuFile_export = uimenu('Parent', Hmain.menuFile, ...
    'Label', 'Export');
Hmain.menuFile_export_export2png = uimenu('Parent', Hmain.menuFile_export, ...
    'Label', 'Export to png', ...
    'Callback', @export2png);
Hmain.menuFile_quit = uimenu('Parent', Hmain.menuFile, ...
    'Label', 'Quit', ...
    'Callback', {@closewindow, Hmain.mainFigure});

Hmain.menuEdit = uimenu('Parent', Hmain.mainFigure, 'Label', 'Edit');

Hmain.menuView = uimenu('Parent', Hmain.mainFigure, 'Label', 'View');
Hmain.menuView_openTable = uimenu('Parent', Hmain.menuView, ...
    'Label', 'Open Table...');

%Hmain.toolbar = uitoolbar('Parent', Hmain.mainFigure,...

%% Left
Hmain.panelL = uipanel('Parent', Hmain.mainFigure,...
    'Position', panelL_position, ...
    'Units', 'normalized', ...
    'BackgroundColor', panelColor, ...
    'ForegroundColor', foregroundColor, ...
    'HighlightColor', 'k', ...
    'ShadowColor', 'k', ...
    'BorderType', 'line', ...
    'FontWeight', 'bold', ...
    'FontSize', 8, ...
    'FontName', defaultFontName, ...
    'Visible', 'on', ...
    'Title', '');

Hmain.fileName1 = uicontrol('Parent', Hmain.panelL, ...
    'Style', 'text', ...
    'BackgroundColor', panelColor, ...
    'ForegroundColor', foregroundColor, ...
    'Units', 'normalized', ...
    'Position', [0.05 0.97 0.9 0.02], ...
    'FontWeight', 'bold', ...
    'FontAngle', 'italic', ...
    'String', 'Filename');
Hmain.fileName2 = uicontrol('Parent', Hmain.panelL, ...
    'Style', 'text', ...
    'BackgroundColor', panelColor, ...
    'ForegroundColor', foregroundColor, ...
    'Units', 'normalized', ...
    'Position', [0.05 0.95 0.9 0.02], ...
    'FontSize', 8, ...
    'String', '-');
Hmain.deviceModel1 = uicontrol('Parent', Hmain.panelL, ...
    'Style', 'text', ...
    'BackgroundColor', panelColor, ...
    'ForegroundColor', foregroundColor, ...
    'Units', 'normalized', ...
    'Position', [0.05 0.92 0.9 0.02], ...
    'FontWeight', 'bold', ...
    'FontAngle', 'italic', ...
    'String', 'Device Model');
Hmain.deviceModel2 = uicontrol('Parent', Hmain.panelL, ...
    'Style', 'text', ...
    'BackgroundColor', panelColor, ...
    'ForegroundColor', foregroundColor, ...
    'Units', 'normalized', ...
    'Position', [0.05 0.90 0.9 0.02], ...
    'FontSize', 8, ...
    'String', '-');
Hmain.samplingFrequency1 = uicontrol('Parent', Hmain.panelL, ...
    'Style', 'text', ...
    'BackgroundColor', panelColor, ...
    'ForegroundColor', foregroundColor, ...
    'Units', 'normalized', ...
    'Position', [0.05 0.87 0.9 0.02], ...
    'FontWeight', 'bold', ...
    'FontAngle', 'italic', ...
    'String', 'Sampling Frequency');
Hmain.samplingFrequency2 = uicontrol('Parent', Hmain.panelL, ...
    'Style', 'text', ...
    'BackgroundColor', panelColor, ...
    'ForegroundColor', foregroundColor, ...
    'Units', 'normalized', ...
    'Position', [0.05 0.85 0.9 0.02], ...
    'FontSize', 8, ...
    'String', '-');

Hmain.nChannels1 = uicontrol('Parent', Hmain.panelL, ...
    'Style', 'text', ...
    'BackgroundColor', panelColor, ...
    'ForegroundColor', foregroundColor, ...
    'Units', 'normalized', ...
    'Position', [0.05 0.82 0.9 0.02], ...
    'FontWeight', 'bold', ...
    'FontAngle', 'italic', ...
    'String', 'Channels');
Hmain.nChannels2 = uicontrol('Parent', Hmain.panelL, ...
    'Style', 'text', ...
    'BackgroundColor', panelColor, ...
    'ForegroundColor', foregroundColor, ...
    'Units', 'normalized', ...
    'Position', [0.05 0.80 0.9 0.02], ...
    'FontSize', 8, ...
    'String', '-');

Hmain.duration1 = uicontrol('Parent', Hmain.panelL, ...
    'Style', 'text', ...
    'BackgroundColor', panelColor, ...
    'ForegroundColor', foregroundColor, ...
    'Units', 'normalized', ...
    'Position', [0.05 0.77 0.9 0.02], ...
    'FontWeight', 'bold', ...
    'FontAngle', 'italic', ...
    'String', 'Duration');
Hmain.duration2 = uicontrol('Parent', Hmain.panelL, ...
    'Style', 'text', ...
    'BackgroundColor', panelColor, ...
    'ForegroundColor', foregroundColor, ...
    'Units', 'normalized', ...
    'Position', [0.05 0.75 0.9 0.02], ...
    'FontSize', 8, ...
    'String', '-');

Hmain.tmin1 = uicontrol('Parent', Hmain.panelL, ...
    'Style', 'text', ...
    'BackgroundColor', panelColor, ...
    'ForegroundColor', foregroundColor, ...
    'Units', 'normalized', ...
    'Position', [0.05 0.72 0.9 0.02], ...
    'FontWeight', 'bold', ...
    'FontAngle', 'italic', ...
    'String', 'tmin');
Hmain.tmin2 = uicontrol('Parent', Hmain.panelL, ...
    'Style', 'text', ...
    'BackgroundColor', panelColor, ...
    'ForegroundColor', foregroundColor, ...
    'Units', 'normalized', ...
    'Position', [0.05 0.70 0.9 0.02], ...
    'FontSize', 8, ...
    'String', '-');

Hmain.tmax1 = uicontrol('Parent', Hmain.panelL, ...
    'Style', 'text', ...
    'BackgroundColor', panelColor, ...
    'ForegroundColor', foregroundColor, ...
    'Units', 'normalized', ...
    'Position', [0.05 0.67 0.9 0.02], ...
    'FontWeight', 'bold', ...
    'FontAngle', 'italic', ...
    'String', 'tmax');
Hmain.tmax2 = uicontrol('Parent', Hmain.panelL, ...
    'Style', 'text', ...
    'BackgroundColor', panelColor, ...
    'ForegroundColor', foregroundColor, ...
    'Units', 'normalized', ...
    'Position', [0.05 0.65 0.9 0.02], ...
    'FontSize', 8, ...
    'String', '-');

Hmain.bandpassText = uicontrol('Parent', Hmain.panelL, ...
    'Style', 'text', ...
    'BackgroundColor', panelColor, ...
    'ForegroundColor', foregroundColor, ...
    'Units', 'normalized', ...
    'Position', [0.05 0.58 0.45 0.04], ...
    'FontWeight', 'bold', ...
    'FontAngle', 'italic', ...
    'String', 'Bandpass');

Hmain.bandpassHPF = uicontrol('Parent', Hmain.panelL, ...
    'Style', 'edit', ...
    'BackgroundColor', panelColor, ...
    'ForegroundColor', foregroundColor, ...
    'Units', 'normalized', ...
    'Position', [0.55 0.59 0.19 0.04], ...
    'FontWeight', 'bold', ...
    'FontAngle', 'italic', ...
    'Callback', @refresh_mainAxes, ...
    'String', '-');

Hmain.bandpassLPF = uicontrol('Parent', Hmain.panelL, ...
    'Style', 'edit', ...
    'BackgroundColor', panelColor, ...
    'ForegroundColor', foregroundColor, ...
    'Units', 'normalized', ...
    'Position', [0.76 0.59 0.19 0.04], ...
    'FontWeight', 'bold', ...
    'FontAngle', 'italic', ...
    'Callback', @refresh_mainAxes, ...
    'String', '-');

Hmain.scaleCheck = uicontrol('parent', Hmain.panelL,...
    'Style', 'checkbox', ...
    'Units', 'normalized', ...
    'Position', [0.05 0.51 0.9 0.03], ...
    'BackgroundColor', panelColor, ...
    'ForegroundColor', foregroundColor, ...
    'FontWeight', 'normal', ...
    'FontSize', 10, ...
    'FontName', defaultFontName, ...
    'Value', 0, ...
    'String', 'Autoscale', ...
    'Enable', 'off', ...
    'Callback', @refresh_mainAxes);

Hmain.eventsCheck = uicontrol('parent', Hmain.panelL,...
    'Style', 'checkbox', ...
    'Units', 'normalized', ...
    'Position', [0.05 0.54 0.9 0.03], ...
    'BackgroundColor', panelColor, ...
    'ForegroundColor', foregroundColor, ...
    'FontWeight', 'normal', ...
    'FontSize', 10, ...
    'FontName', defaultFontName, ...
    'Value', 0, ...
    'String', 'Events', ...
    'Enable', 'off', ...
    'Callback', @refresh_mainAxes);

Hmain.channelsList = uicontrol('parent', Hmain.panelL,...
    'Style', 'listbox', ...
    'Units', 'normalized', ...
    'Position', [0.05 0.09 0.9 0.39], ...
    'BackgroundColor', backgroundColor, ...
    'ForegroundColor', foregroundColor, ...
    'FontWeight', 'normal', ...
    'FontSize', 10, ...
    'FontName', defaultFontName, ...
    'Max', 100, ...
    'Min', 0, ...
    'String', '', ...
    'Enable', 'off', ...
    'Callback', @refresh_mainAxes);

Hmain.datatypePopup = uicontrol('parent', Hmain.panelL,...
    'Style', 'popupmenu', ...
    'Units', 'normalized', ...
    'Position', [0.05 0.05 0.9 0.03], ...
    'BackgroundColor', backgroundColor, ...
    'ForegroundColor', foregroundColor, ...
    'FontWeight', 'bold', ...
    'FontSize', 10, ...
    'FontName', defaultFontName, ...
    'Max', 100, ...
    'Min', 0, ...
    'String', {'AC', 'DC', 'Phase', 'All'}, ...
    'Value', 2, ...
    'Enable', 'off', ...
    'Callback', @refresh_mainAxes);

Hmain.wavelengthPopup = uicontrol('parent', Hmain.panelL,...
    'Style', 'popupmenu', ...
    'Units', 'normalized', ...
    'Position', [0.05 0.01 0.9 0.03], ...
    'BackgroundColor', backgroundColor, ...
    'ForegroundColor', foregroundColor, ...
    'FontWeight', 'bold', ...
    'FontSize', 10, ...
    'FontName', defaultFontName, ...
    'Max', 100, ...
    'Min', 0, ...
    'String', {'830 nm', '690 nm', 'All'}, ...
    'Value', 3, ...
    'Enable', 'off', ...
    'Callback', @refresh_mainAxes);

%% Center Top
Hmain.panelCT = uipanel('parent', Hmain.mainFigure,...
    'Position', panelCT_position, ...
    'Units', 'normalized', ...
    'BackgroundColor', backgroundColor, ...
    'ForegroundColor', foregroundColor, ...
    'HighlightColor', backgroundColor, ...
    'ShadowColor', [211 211 211]/255, ...
    'BorderType', 'line', ...
    'FontWeight', 'bold', ...
    'FontSize', 8, ...
    'FontName', defaultFontName, ...
    'Visible', 'on', ...
    'Title', '');

Hmain.probeAxes = axes('Parent', Hmain.panelCT, ...
    'Units', 'Normalized', ...
    'Color', backgroundColor, ...
    'XColor', foregroundColor, ...
    'YColor', foregroundColor, ...
    'FontWeight', 'bold', ...
    'FontSize', 8, ...
    'FontName', defaultFontName, ...
    'XLim', [0 10], ...
    'YLim', [0 10], ...
    'Position', [0.05 0.1 0.4 0.85]); % check position

Hmain.sensitivityAxes = axes('Parent', Hmain.panelCT, ...
    'Units', 'Normalized', ...
    'Color', backgroundColor, ...
    'XColor', foregroundColor, ...
    'YColor', foregroundColor, ...
    'FontWeight', 'bold', ...
    'FontSize', 8, ...
    'FontName', defaultFontName, ...
    'Position', [0.55 0.1 0.4 0.85]); % check position

%% Center Bottom
Hmain.panelCB = uipanel('parent', Hmain.mainFigure,...
    'Position', panelCB_position, ...
    'Units', 'normalized', ...
    'BackgroundColor', backgroundColor, ...
    'ForegroundColor', foregroundColor, ...
    'HighlightColor', backgroundColor, ...
    'ShadowColor', [211 211 211]/255, ...
    'BorderType', 'line', ...
    'FontWeight', 'bold', ...
    'FontSize', 8, ...
    'FontName', defaultFontName, ...
    'Visible', 'on', ...
    'Title', '');

Hmain.mainAxes = axes('parent', Hmain.panelCB,...
    'Position', [0.05 0.15 0.9 0.8], ...
    'Units', 'normalized', ...
    'Color', panelColor, ...
    'XColor', foregroundColor, ...
    'YColor', foregroundColor, ...
    'FontWeight', 'bold', ...
    'FontSize', 8, ...
    'FontName', defaultFontName, ...
    'Title', 'Main plots');

Hmain.mainSlider = uicontrol('parent', Hmain.panelCB,...
    'Units', 'normalized', ...
    'Position', [0.1 0 0.8 0.05], ...
    'Style', 'slider', ...
    'BackgroundColor', backgroundColor, ...
    'ForegroundColor', foregroundColor, ...
    'FontWeight', 'bold', ...
    'FontSize', 8, ...
    'Visible', 'on', ...
    'Callback', @refresh_mainAxes, ...
    'FontName', defaultFontName);

Hmain.mainAxesMIN = uicontrol('Parent', Hmain.panelCB, ...
    'Style', 'edit', ...
    'BackgroundColor', panelColor, ...
    'ForegroundColor', foregroundColor, ...
    'Units', 'normalized', ...
    'Position', [0.05 0 0.04 0.05], ...
    'FontWeight', 'bold', ...
    'FontAngle', 'italic', ...
    'Callback', @refresh_mainAxes, ...
    'String', 'min');

Hmain.mainAxesMAX = uicontrol('Parent', Hmain.panelCB, ...
    'Style', 'edit', ...
    'BackgroundColor', panelColor, ...
    'ForegroundColor', foregroundColor, ...
    'Units', 'normalized', ...
    'Position', [0.91 0 0.04 0.05], ...
    'FontWeight', 'bold', ...
    'FontAngle', 'italic', ...
    'Callback', @refresh_mainAxes, ...
    'String', 'max');

%% Right
Hmain.panelR = uipanel('parent', Hmain.mainFigure,...
    'Position', panelR_position, ...
    'Units', 'normalized', ...
    'BackgroundColor', panelColor, ...
    'ForegroundColor', foregroundColor, ...
    'HighlightColor', 'k', ...
    'ShadowColor', 'k', ...
    'BorderType', 'line', ...
    'FontWeight', 'bold', ...
    'FontSize', 8, ...
    'FontName', defaultFontName, ...
    'Visible', 'on', ...
    'Title', '');

Hmain.channelType1 = uicontrol('Parent', Hmain.panelR, ...
    'Style', 'text', ...
    'BackgroundColor', panelColor, ...
    'ForegroundColor', foregroundColor, ...
    'Units', 'normalized', ...
    'Position', [0.05 0.97 0.9 0.02], ...
    'FontWeight', 'bold', ...
    'FontAngle', 'italic', ...
    'String', 'Channel Type');
Hmain.channelType2 = uicontrol('Parent', Hmain.panelR, ...
    'Style', 'text', ...
    'BackgroundColor', panelColor, ...
    'ForegroundColor', foregroundColor, ...
    'Units', 'normalized', ...
    'Position', [0.05 0.95 0.9 0.02], ...
    'FontSize', 8, ...
    'String', '-');
Hmain.channelNumber1 = uicontrol('Parent', Hmain.panelR, ...
    'Style', 'text', ...
    'BackgroundColor', panelColor, ...
    'ForegroundColor', foregroundColor, ...
    'Units', 'normalized', ...
    'Position', [0.05 0.92 0.9 0.02], ...
    'FontWeight', 'bold', ...
    'FontAngle', 'italic', ...
    'String', 'Channel');
Hmain.channelNumber2 = uicontrol('Parent', Hmain.panelR, ...
    'Style', 'text', ...
    'BackgroundColor', panelColor, ...
    'ForegroundColor', foregroundColor, ...
    'Units', 'normalized', ...
    'Position', [0.05 0.90 0.9 0.02], ...
    'FontSize', 8, ...
    'String', '-');
Hmain.wavelength1 = uicontrol('Parent', Hmain.panelR, ...
    'Style', 'text', ...
    'BackgroundColor', panelColor, ...
    'ForegroundColor', foregroundColor, ...
    'Units', 'normalized', ...
    'Position', [0.05 0.87 0.9 0.02], ...
    'FontWeight', 'bold', ...
    'FontAngle', 'italic', ...
    'String', 'Wavelength');
Hmain.wavelength2 = uicontrol('Parent', Hmain.panelR, ...
    'Style', 'text', ...
    'BackgroundColor', panelColor, ...
    'ForegroundColor', foregroundColor, ...
    'Units', 'normalized', ...
    'Position', [0.05 0.85 0.9 0.02], ...
    'FontSize', 8, ...
    'String', '-');
Hmain.averageValue1 = uicontrol('Parent', Hmain.panelR, ...
    'Style', 'text', ...
    'BackgroundColor', panelColor, ...
    'ForegroundColor', foregroundColor, ...
    'Units', 'normalized', ...
    'Position', [0.05 0.82 0.9 0.02], ...
    'FontWeight', 'bold', ...
    'FontAngle', 'italic', ...
    'String', 'Average');
Hmain.averageValue2 = uicontrol('Parent', Hmain.panelR, ...
    'Style', 'text', ...
    'BackgroundColor', panelColor, ...
    'ForegroundColor', foregroundColor, ...
    'Units', 'normalized', ...
    'Position', [0.05 0.80 0.9 0.02], ...
    'FontSize', 8, ...
    'String', '-');
Hmain.stdValue1 = uicontrol('Parent', Hmain.panelR, ...
    'Style', 'text', ...
    'BackgroundColor', panelColor, ...
    'ForegroundColor', foregroundColor, ...
    'Units', 'normalized', ...
    'Position', [0.05 0.77 0.9 0.02], ...
    'FontWeight', 'bold', ...
    'FontAngle', 'italic', ...
    'String', 'SD');
Hmain.stdValue2 = uicontrol('Parent', Hmain.panelR, ...
    'Style', 'text', ...
    'BackgroundColor', panelColor, ...
    'ForegroundColor', foregroundColor, ...
    'Units', 'normalized', ...
    'Position', [0.05 0.75 0.9 0.02], ...
    'FontSize', 8, ...
    'String', '-');


Hmain.averageValueWindow1 = uicontrol('Parent', Hmain.panelR, ...
    'Style', 'text', ...
    'BackgroundColor', panelColor, ...
    'ForegroundColor', foregroundColor, ...
    'Units', 'normalized', ...
    'Position', [0.05 0.72 0.9 0.02], ...
    'FontWeight', 'bold', ...
    'FontAngle', 'italic', ...
    'String', 'Average window');
Hmain.averageValueWindow2 = uicontrol('Parent', Hmain.panelR, ...
    'Style', 'text', ...
    'BackgroundColor', panelColor, ...
    'ForegroundColor', foregroundColor, ...
    'Units', 'normalized', ...
    'Position', [0.05 0.70 0.9 0.02], ...
    'FontSize', 8, ...
    'String', '-');
Hmain.stdValueWindow1 = uicontrol('Parent', Hmain.panelR, ...
    'Style', 'text', ...
    'BackgroundColor', panelColor, ...
    'ForegroundColor', foregroundColor, ...
    'Units', 'normalized', ...
    'Position', [0.05 0.67 0.9 0.02], ...
    'FontWeight', 'bold', ...
    'FontAngle', 'italic', ...
    'String', 'SD window');
Hmain.stdValueWindow2 = uicontrol('Parent', Hmain.panelR, ...
    'Style', 'text', ...
    'BackgroundColor', panelColor, ...
    'ForegroundColor', foregroundColor, ...
    'Units', 'normalized', ...
    'Position', [0.05 0.65 0.9 0.02], ...
    'FontSize', 8, ...
    'String', '-');



Hmain.datasetList = uicontrol('parent', Hmain.panelR,...
    'Style', 'listbox', ...
    'Units', 'normalized', ...
    'Position', [0.05 0.01 0.9 0.39], ...
    'BackgroundColor', backgroundColor, ...
    'ForegroundColor', foregroundColor, ...
    'FontWeight', 'normal', ...
    'FontSize', 10, ...
    'FontName', defaultFontName, ...
    'Max', 1, ...
    'Min', 1, ...
    'String', '', ...
    'Callback', @load_from_dataset, ...
    'Enable', 'off');

%% Nested functions

    function refresh_mainAxes(hObjects, callbackdata)
        axes(Hmain.mainAxes)
        cla;
        Hmain.mainAxes.YGrid = 'on';
%         if get(Hmain.zoomToggle, 'Value')==1
%             zoom on
%         else
%             zoom off
%         end
%         if get(Hmain.panToggle, 'Value')==1
%             pan on
%         else
%             pan off
%         end
        hold on
        
        columns_AC = find(contains(channelNames,'AC'));
        columns_DC = find(contains(channelNames,'DC'));
        columns_Ph = find(contains(channelNames,'Ph'));
        
        switch get(Hmain.wavelengthPopup, 'Value')
            case 1
                switch get(Hmain.datatypePopup, 'Value')
                    case 1
                        selectedChannels = columns_AC(1:2:end);
                    case 2
                        selectedChannels = columns_DC(1:2:end);
                    case 3
                        selectedChannels = columns_Ph(1:2:end);
                    case 4
                        selectedChannels = [columns_AC(1:2:end) columns_DC(1:2:end) columns_Ph(1:2:end)];
                end
            case 2
                switch get(Hmain.datatypePopup, 'Value')
                    case 1
                        selectedChannels = columns_AC(2:2:end);
                    case 2
                        selectedChannels = columns_DC(2:2:end);
                    case 3
                        selectedChannels = columns_Ph(2:2:end);
                    case 4
                        selectedChannels = [columns_AC(2:2:end) columns_DC(2:2:end) columns_Ph(2:2:end)];
                end
            case 3
                switch get(Hmain.datatypePopup, 'Value')
                    case 1
                        selectedChannels = columns_AC;
                    case 2
                        selectedChannels = columns_DC;
                    case 3
                        selectedChannels = columns_Ph;
                    case 4
                        selectedChannels = [columns_AC columns_DC columns_Ph];
                end
        end
        
        % Filter data (bandpass)
        [lpf, status_lpf] = str2num(get(Hmain.bandpassLPF, 'String')); % lpf > hpf
        [hpf, status_hpf] = str2num(get(Hmain.bandpassHPF, 'String'));
        if status_lpf && status_hpf
            % Bandpass
            d = designfilt('bandpassiir','FilterOrder',4, ...
                           'HalfPowerFrequency1',hpf, ...
                           'HalfPowerFrequency2',lpf, ...
                           'SampleRate',sampling_frequency);
            sensors_filtered = filtfilt(d, sensors);
        elseif ~status_lpf && status_hpf
            % Highpass (never used)
            d = designfilt('highpassiir','FilterOrder',8, ...
                           'PassbandFrequency',hpf, ...
                           'PassbandRipple',0.2, ...
                           'SampleRate',sampling_frequency);
            sensors_filtered = filtfilt(d, sensors);
            
        elseif status_lpf && ~status_hpf
            % Lowpass
            d = designfilt('lowpassiir','FilterOrder',8, ...
                          'PassbandFrequency',lpf, ...
                          'PassbandRipple',0.2, ...
                          'SampleRate',sampling_frequency);
            sensors_filtered = filtfilt(d, sensors);
        else
            sensors_filtered = sensors;
        end
        
        hSensors = gobjects(size(sensors_filtered,1),1);
        sensors_selection = sensors_filtered(selectedChannels,:)';
        
        selection = get(Hmain.channelsList, 'Value');
        
        if max(selection) > size(sensors_selection,2)
            selection = 1;
        end
        
        set(Hmain.channelsList, 'Value', selection);
        set(Hmain.channelsList, 'String', channelNames(selectedChannels));
        
        tmin_selection = str2double(get(Hmain.mainAxesMIN, 'String'));
        tmax_selection = str2double(get(Hmain.mainAxesMAX, 'String'));
        xmin_selection = round(tmin_selection*sampling_frequency);
        xmax_selection = round(tmax_selection*sampling_frequency);
        if xmin_selection == 0
            xmin_selection = 1;
        end
        if xmax_selection > size(sensors_selection,1)
            xmax_selection = size(sensors_selection,1);
        end
        ymin_selection = min(min(sensors_selection(xmin_selection:xmax_selection, selection)));
        ymax_selection = max(max(sensors_selection(xmin_selection:xmax_selection, selection)));
        yrange_selection = abs(ymax_selection-ymin_selection);
        
        if yrange_selection == 0
            yrange_selection = 1;
        end
        
        if ~isempty(selection)
            aa = 1;
            for ii = selection
                hSensors(ii) = plot(timeline, sensors_selection(:,selection(aa)), 'LineWidth', 1, 'LineStyle', '-');
                set(hSensors(ii), 'Color', channelColors(selection(aa),:));
                aa = aa+1;
            end
            
            xlabel(Hmain.mainAxes, 'Time $(s)$', 'Interpreter', 'latex', ...
                'FontSize', 10, 'FontWeight', 'bold')
            ylabel(Hmain.mainAxes, 'AC, DC, Ph', 'Interpreter', 'latex', ...
                'FontSize', 10, 'FontWeight', 'normal')
            
            hSensors_selection = findall(hSensors, 'Type', 'Line');
            set(hSensors_selection, 'buttonDownFcn', {@change_line_width, channelColors(selection,:)})
            
            if get(Hmain.scaleCheck, 'Value')==1
                %set(Hmain.mainAxes, 'XLim', [tmin-trange*0.02 tmax+trange*0.02])
                set(Hmain.mainAxes, 'YLim', [ymin_selection-yrange_selection*0.02 ymax_selection+yrange_selection*0.02])
            else
                %set(Hmain.mainAxes, 'XLim', [tmin-trange*0.02 tmax+trange*0.02])
                set(Hmain.mainAxes, 'YLim', [ymin-yrange*0.02 ymax+yrange*0.02])
            end
            xlim([floor(tmin_selection) ceil(tmax_selection)]);
            axis fill

            if get(Hmain.eventsCheck, 'Value')==1
                cc = 1;
                for aa = 3:1:length(events)
                    for bb = 1:1:length(events{aa})
                        hEvents(aa,bb) = stem(timeline(events{aa}(bb)), ymax_selection, ...
                            'Color', eventsColors(aa,:), ...
                            'MarkerFaceColor', eventsColors(aa,:), ...
                            'MarkerEdgeColor', eventsColors(aa,:));
                        cc = cc+1;
                    end
                end
                if exist('hEvents', 'var')
                    lgd = legend(hEvents(3:length(events),1), eventsLabels{3:length(events)});
                    title(lgd, 'Events');
                end
            else
                if exist('lgd', 'var')
                    delete(lgd);
                end
                legend('off');
            end
            
            % Plot probe
            if isstruct(probe)
                axes(Hmain.probeAxes)
                cla;
                hold on
                
                x1 = probe.coords_2d.s(:,1);
                y1 = probe.coords_2d.s(:,2);
                x2 = probe.coords_2d.d(:,1);
                y2 = probe.coords_2d.d(:,2);
                
                xmin_prb = min(min(x1(:)),min(x2(:)));
                xmax_prb = max(max(x1(:)),max(x2(:)));
                ymin_prb = min(min(y1(:)),min(y2(:)));
                ymax_prb = max(max(y1(:)),max(y2(:)));
                
                pos_A = [(xmax_prb+xmin_prb)/2 1.3*ymax_prb];
                pos_P = [(xmax_prb+xmin_prb)/2 1.3*ymin_prb];
                pos_L = [1.3*xmin_prb (ymax_prb+ymin_prb)/2];
                pos_R = [1.3*xmax_prb (ymax_prb+ymin_prb)/2];
                
                text([pos_A(1) pos_P(1) pos_L(1) pos_R(1)], [pos_A(2) pos_P(2) pos_L(2) pos_R(2)], ...
                    {'A','P','L','R'}, ...
                    'Color', foregroundColor, ...
                    'FontSize',12, ...
                    'HorizontalAlignment', 'center', ...
                    'BackgroundColor', panelColor, ...
                    'EdgeColor', foregroundColor, ...
                    'FontWeight','bold');
                
                optodesColor = lines(2);
                optodeShape = 'o';
                if 0
                    plot(x1,y1, ...
                        'Marker', optodeShape, ...
                        'MarkerFaceColor', optodesColor(2,:), ...
                        'LineStyle', 'none', ...
                        'Color', optodesColor(2,:));
                    plot(x2,y2, ...
                        'Marker', optodeShape, ...
                        'MarkerFaceColor', optodesColor(1,:), ...
                        'LineStyle', 'none', ...
                        'Color', optodesColor(1,:));
                else
                    text(x1,y1, ...
                        cellstr(string(1:16)), ...
                        'FontWeight', 'bold', ...
                        'Color', optodesColor(2,:));
                    text(x2,y2, ...
                        cellstr(string(1:4)), ...
                        'FontWeight', 'bold', ...
                        'Color', optodesColor(1,:));
                end
                xlim([1.5*xmin_prb 1.5*xmax_prb]);
                ylim([1.5*ymin_prb 1.5*ymax_prb]);
                axis off
                %axis equal
                
                for ii = 1:1:length(selection)
                    egg = ceil(mod(selection,64)/2);
                    egg(egg==0) = 32;
                    pos_s = probe.coords_2d.s(probe.pairs(egg(ii),1),:);
                    pos_d = probe.coords_2d.d(probe.pairs(egg(ii),2),:);
                    channel_lines(ii) = plot([pos_s(1) pos_d(1)], [pos_s(2) pos_d(2)], ...
                        'Color', channelColors(selection(ii),:), ...
                        'LineWidth', 4);
                    uistack(channel_lines, 'bottom');
                end
            end
            
            % Plot Sensitivity
            if isstruct(atlas)
                axes(Hmain.sensitivityAxes)
                cla;
                hold on
                egg = ceil(mod(selection,64)/2);
                egg(egg==0) = 32;
                sensitivity_selection = log(sum(probe.GM_sensitivity(:,egg),2)/max(probe.GM_sensitivity(:)));
                hScalp = trisurf(atlas.scalp.face, ...
                    atlas.scalp.node(:,1), atlas.scalp.node(:,2), atlas.scalp.node(:,3), ...
                    min(log(sum(probe.GM_sensitivity,2)))*ones(length(atlas.scalp.node),1));
                hScalp.FaceAlpha = 0.2;
                hSensitivity = trisurf(atlas.gm.face, ...
                    atlas.gm.node(:,1), atlas.gm.node(:,2), atlas.gm.node(:,3), ...
                    sensitivity_selection);
                colormap(parula);
                c = colormap;
                c(1,:)=[1 1 1];
                colormap(c);
                caxis([-4 0]);
                axis off
                axis equal
                shading interp
                lighting gouraud
                light('Position', [+100 0 0])
                light('Position', [-100 0 0])
                hSensitivity.SpecularStrength = 0;
                rotate3d(Hmain.sensitivityAxes, 'on');
                for ii = 1:1:length(selection)
                    pos_s = probe.coords_3d.s(probe.pairs(egg(ii),1),:);
                    pos_d = probe.coords_3d.d(probe.pairs(egg(ii),2),:);
                    channel_lines(ii) = plot3([pos_s(1) pos_d(1)], [pos_s(2) pos_d(2)], [pos_s(3) pos_d(3)], ...
                        'Color', channelColors(selection(ii),:), ...
                        'LineWidth', 2);
                end
                if 0
                    plot3(probe.coords_3d.d(:,1),probe.coords_3d.d(:,2),probe.coords_3d.d(:,3),...
                        'LineStyle', 'none', ...
                        'Marker', optodeShape, ...
                        'MarkerFaceColor', optodesColor(1,:), ...
                        'Color', optodesColor(1,:));
                    plot3(probe.coords_3d.s(:,1), probe.coords_3d.s(:,2), probe.coords_3d.s(:,3),...
                        'LineStyle', 'none', ...
                        'Marker', optodeShape, ...
                        'MarkerFaceColor', optodesColor(2,:), ...
                        'Color', optodesColor(2,:));
                else
                    text(probe.coords_3d.d(:,1),probe.coords_3d.d(:,2),probe.coords_3d.d(:,3),...
                        cellstr(string(1:4)), ...
                        'FontWeight', 'bold', ...
                        'Color', optodesColor(1,:),...
                        'FontSize', 12);
                    text(probe.coords_3d.s(:,1), probe.coords_3d.s(:,2), probe.coords_3d.s(:,3),...
                        cellstr(string(1:16)), ...
                        'FontWeight', 'bold', ...
                        'Color', optodesColor(2,:),...
                        'FontSize', 12);
                end 
            end
            
            if size(selection,2) == 1
                aa = get(Hmain.channelsList, 'String');
                aa = aa(get(Hmain.channelsList, 'Value'));
                channelType = aa{1}(3:4);
                
                if isstruct(probe)
                    channelNumber = ['C ' num2str(egg) ' - (S ' num2str(probe.pairs(egg,1)) ' - D ' num2str(probe.pairs(egg,2)) ')'];
                else
                    channelNumber = 'Probe file unavailable';
                end
                
                if mod(selection,2) == 0 %pari
                    wavelength = '690 nm';
                else % dispari
                    wavelength = '830 nm';
                end
                
                averageValue = num2str(mean(sensors_selection(:,selection)));
                stdValue = num2str(std(sensors_selection(:,selection)));
                averageValueWindow = num2str(mean(sensors_selection(xmin_selection:xmax_selection,selection)));
                stdValueWindow = num2str(std(sensors_selection(xmin_selection:xmax_selection,selection)));
            else
                channelType = 'multiselection';
                channelNumber = 'multiselection';
                wavelength = 'multiselection';
                averageValue = 'multiselection';
                stdValue = 'multiselection';
                averageValueWindow = 'multiselection';
                stdValueWindow = 'multiselection';
            end
            set(Hmain.channelType2, 'String', channelType)
            set(Hmain.channelNumber2, 'String', channelNumber)
            set(Hmain.wavelength2, 'String', wavelength)
            set(Hmain.averageValue2, 'String', averageValue)
            set(Hmain.stdValue2, 'String', stdValue)
            set(Hmain.averageValueWindow2, 'String', averageValueWindow)
            set(Hmain.stdValueWindow2, 'String', stdValueWindow)
        else
            cla(Hmain.mainAxes);
            cla(Hmain.probeAxes);
            cla(Hmain.sensitivityAxes);
        end
    end

    function open_table(hObjects, callbackdata, T)
        
        f = figure('Name','Data','NumberTitle','off', 'Units', 'normalized','Position',[0.1 0.1 0.8 0.8]);
        if istable(T)
            C = table2cell(T);
        else
            C = T;
        end
        t = uitable(f, 'Data', C, 'Units', 'normalized','Position',[0.01 0.1 0.98 0.85]);
        str = string(T.Properties.VariableNames);
        t.ColumnName = {str};
        
        b_pushbutton = uicontrol('style', 'pushbutton', 'Units', 'normalized', 'position', [0.85 0.025 0.1 0.05], 'Enable', 'on', 'Callback', {@closewindow,f});
        set(b_pushbutton,'String','Close');
    end

    function closewindow(hObject, callbackdata, f)
        close(f);
    end

    function export2png(hObject, callbackdata)
        screenshotName = ['Screenshot_Raw_Explorer_' datestr(datetime('now'), 1) '_' datestr(datetime('now'), 13)];
        Hmain.mainFigure.InvertHardcopy = 'off';
        %set(Hmain.mainFigure,'PaperOrientation','portrait');
        %set(Hmain.mainFigure,'PaperUnits','normalized');
        %set(Hmain.mainFigure,'PaperPosition', [0 0 1 1]);
        print(Hmain.mainFigure, screenshotName, '-dpng', '-r600')
    end

    function load_data(hObject, callbackdata)
        cla(Hmain.probeAxes)
        cla(Hmain.mainAxes)
        cla(Hmain.sensitivityAxes)
        axis(Hmain.sensitivityAxes, 'vis3d');
        [filename, pathname] = uigetfile('*.txt', 'Pick a ISS Raw textfile...');
        current_file.filename = filename;
        current_file.pathname = pathname;
        [~,name,~] = fileparts(filename);
        probe_filename = [name '.prb'];
        if exist([pathname probe_filename], 'file')
            probe = load_probe([pathname probe_filename]);
            atlas_filename = [probe.atlas '.atl'];
            if exist([pathname atlas_filename], 'file')
                atlas = load([pathname atlas_filename], '-mat');
            else
                atlas = 0;
            end
        else
            probe = 0;
            atlas = 0;
        end
        
        T = load_ISS_Imagent_raw([pathname filename]);

        sensors = table2array(T.data);
        sensors = sensors(:,6:end-5)';
        
        eventsDummy = table2array(T.data(:,end));
        eventsCodes = unique(eventsDummy);
        eventsLabels = cellstr(string(eventsCodes));
        nEvents = length(eventsCodes);
        clear events;
        for aa = 1:1:nEvents
            spam = find(eventsDummy == eventsCodes(aa));
            if aa>1
                egg = find(diff(spam)==1);
                if isempty(egg)
                    events{aa} = spam;
                else
                    spam2 = spam;
                    spam(egg) = [];
                    events{aa} = spam;
                end
            else
                events{aa} = spam;
            end
            
        end
        pauseColor = [0 0 1];
        eventsColors = [flipud(autumn(nEvents-1)); pauseColor];   
        
        nChannels = size(sensors,1);
        spam1 = contains(T.data.Properties.VariableNames, 'aux');
        spam2 = contains(T.data.Properties.VariableNames, 'time');
        spam3 = contains(T.data.Properties.VariableNames, 'step');
        spam4 = contains(T.data.Properties.VariableNames, 'group');
        spam5 = contains(T.data.Properties.VariableNames, 'mark');
        spam6 = contains(T.data.Properties.VariableNames, 'flag');
        spam = not(spam1 | spam2 | spam3 | spam4 | spam5 | spam6);
        
        sensors = table2array(T.data);
        sensors = sensors(:,spam)';
        channelNames = T.data.Properties.VariableNames(spam);
        nChannelsPerDetector = nChannels/(2*4*3);
        channelColors = zeros(nChannels/(3*4),3);
        spam = parula(nChannelsPerDetector);
        channelColors(1:2:end,:) = spam;
        channelColors(2:2:end,:) = spam;
        channelColors = repmat(channelColors,4,1);
        channelColors = repmat(channelColors,3,1);
           
        % Set time info
        sample_min = 0;
        sample_max = size(sensors,2);
        sampling_frequency = T.metadata.Update_Rate;
        
        t_baseline = 2;
        samplebaseline = t_baseline * sampling_frequency;
        
        %tmin = sample_min / sampling_frequency-t_baseline;
        %tmax = sample_max / sampling_frequency-t_baseline;
        tmin = sample_min / sampling_frequency;
        tmax = sample_max / sampling_frequency;
        trange = abs(tmax-tmin);
        
        timeline = linspace(tmin, tmax, sample_max);
        
        % Set fNIRS data info
        ymin = min(sensors(:));
        ymax = max(sensors(:));
        yrange = abs(ymax-ymin);
        
        set(Hmain.channelsList, 'Enable', 'on');
        set(Hmain.eventsCheck, 'Enable', 'on');
        set(Hmain.scaleCheck, 'Enable', 'on');
        %set(Hmain.zoomToggle, 'Enable', 'on');
        %set(Hmain.panToggle, 'Enable', 'on');
        set(Hmain.datatypePopup, 'Enable', 'on');
        %set(Hmain.wavelengthPopup, 'Enable', 'on');
        
        set(Hmain.menuView_openTable, 'Callback', {@open_table,T.data});
        set(Hmain.eventsCheck, 'Value', 1);
        set(Hmain.scaleCheck, 'Value', 1);
        
        set(Hmain.fileName2, 'String', filename)
        set(Hmain.deviceModel2, 'String', T.metadata.Model)
        set(Hmain.samplingFrequency2, 'String', [num2str(T.metadata.Update_Rate) ' Hz'])
        set(Hmain.nChannels2, 'String', num2str(nChannels/(2*3)))
        set(Hmain.duration2, 'String', [datestr(tmax/(24*60*60),'HH:MM:SS') ' (' num2str(sample_max) ' samples)'])
        set(Hmain.tmin2, 'String', [num2str(tmin) ' s'])
        set(Hmain.tmax2, 'String', [num2str(tmax) ' s'])
        
        set(Hmain.mainAxesMIN, 'String', num2str(floor(tmin)));
        set(Hmain.mainAxesMAX, 'String', num2str(ceil(tmax)));
        set(Hmain.mainSlider, 'Min', tmin);
        set(Hmain.mainSlider, 'Max', tmax);
        set(Hmain.mainSlider, 'Value', tmin);
        set(Hmain.mainSlider, 'SliderStep', [1 1]);
        
        % Set list of txt files in the same folder
        spam = dir([current_file.pathname '*.txt']);
        if size(spam,1)>1
            set(Hmain.datasetList, 'Enable', 'on');
            set(Hmain.datasetList, 'String', {spam.name})
        else
            set(Hmain.datasetList, 'Enable', 'off');
        end
        refresh_mainAxes;
    end

    function load_from_dataset(hObject, callbackdata)
        cla(Hmain.probeAxes)
        cla(Hmain.mainAxes)
        cla(Hmain.sensitivityAxes)
        %axis vis3d
        spam = get(Hmain.datasetList, 'String');
        egg = get(Hmain.datasetList, 'Value');
        filename = spam(egg);
        filename = filename{1};
        pathname = current_file.pathname;
        [~,name,~] = fileparts(filename);
        probe_filename = [name '.prb'];
        if exist([pathname probe_filename], 'file')
            probe = load_probe([pathname probe_filename]);
            atlas_filename = [probe.atlas '.atl'];
            if exist([pathname atlas_filename], 'file')
                atlas = load([pathname atlas_filename], '-mat');
            else
                atlas = 0;
            end
        else
            probe = 0;
            atlas = 0;
        end
        
        T = load_ISS_Imagent_raw([pathname filename]);

        eventsDummy = table2array(T.data(:,end));
        eventsCodes = unique(eventsDummy);
        eventsLabels = cellstr(string(eventsCodes));
        nEvents = length(eventsCodes);
        clear events;
        for aa = 1:1:nEvents
            spam = find(eventsDummy == eventsCodes(aa));
            if aa>1
                egg = find(diff(spam)==1);
                if isempty(egg)
                    events{aa} = spam;
                else
                    spam2 = spam;
                    spam(egg) = [];
                    events{aa} = spam;
                end
            else
                events{aa} = spam;
            end
            
        end
        pauseColor = [0 0 1];
        eventsColors = [flipud(autumn(nEvents-1)); pauseColor];
        
        nChannels = size(sensors,1);
        spam1 = contains(T.data.Properties.VariableNames, 'aux');
        spam2 = contains(T.data.Properties.VariableNames, 'time');
        spam3 = contains(T.data.Properties.VariableNames, 'step');
        spam4 = contains(T.data.Properties.VariableNames, 'group');
        spam5 = contains(T.data.Properties.VariableNames, 'mark');
        spam6 = contains(T.data.Properties.VariableNames, 'flag');
        spam = not(spam1 | spam2 | spam3 | spam4 | spam5 | spam6);
        
        sensors = table2array(T.data);
        sensors = sensors(:,spam)';
        channelNames = T.data.Properties.VariableNames(spam);
        nChannelsPerDetector = nChannels/(2*4*3);
        channelColors = zeros(nChannels/(3*4),3);
        spam = parula(nChannelsPerDetector);
        channelColors(1:2:end,:) = spam;
        channelColors(2:2:end,:) = spam;
        channelColors = repmat(channelColors,4,1);
        channelColors = repmat(channelColors,3,1);
           
        % Set time info
        sample_min = 0;
        sample_max = size(sensors,2);
        sampling_frequency = T.metadata.Update_Rate;
        
        t_baseline = 2;
        samplebaseline = t_baseline * sampling_frequency;
        
        %tmin = sample_min / sampling_frequency-t_baseline;
        %tmax = sample_max / sampling_frequency-t_baseline;
        tmin = sample_min / sampling_frequency;
        tmax = sample_max / sampling_frequency;
        trange = abs(tmax-tmin);
        
        timeline = linspace(tmin, tmax, sample_max);
        
        % Set fNIRS data info
        ymin = min(sensors(:));
        ymax = max(sensors(:));
        yrange = abs(ymax-ymin);
        
        set(Hmain.channelsList, 'Enable', 'on');
        set(Hmain.eventsCheck, 'Enable', 'on');
        set(Hmain.scaleCheck, 'Enable', 'on');
        %set(Hmain.zoomToggle, 'Enable', 'on');
        %set(Hmain.panToggle, 'Enable', 'on');
        set(Hmain.datatypePopup, 'Enable', 'on');
        %set(Hmain.wavelengthPopup, 'Enable', 'on');
        
        set(Hmain.menuView_openTable, 'Callback', {@open_table,T.data});
        set(Hmain.eventsCheck, 'Value', 1);
        set(Hmain.scaleCheck, 'Value', 1);
        
        set(Hmain.fileName2, 'String', filename)
        set(Hmain.deviceModel2, 'String', T.metadata.Model)
        set(Hmain.samplingFrequency2, 'String', [num2str(T.metadata.Update_Rate) ' Hz'])
        set(Hmain.nChannels2, 'String', num2str(nChannels/(2*3)))
        set(Hmain.duration2, 'String', [datestr(tmax/(24*60*60),'HH:MM:SS') ' (' num2str(sample_max) ' samples)'])
        set(Hmain.tmin2, 'String', [num2str(tmin) ' s'])
        set(Hmain.tmax2, 'String', [num2str(tmax) ' s'])
        
        set(Hmain.mainAxesMIN, 'String', num2str(floor(tmin)));
        set(Hmain.mainAxesMAX, 'String', num2str(ceil(tmax)));
        set(Hmain.mainSlider, 'Min', tmin);
        set(Hmain.mainSlider, 'Max', tmax);
        set(Hmain.mainSlider, 'Value', tmin);
        set(Hmain.mainSlider, 'SliderStep', [1 1]);
        
        refresh_mainAxes;
    end

end